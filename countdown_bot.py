import os
import logging
from datetime import datetime
from zoneinfo import ZoneInfo
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.date import DateTrigger

from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
)

# ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------------
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –í Render –∑–∞–¥–∞—à—å –≤ Environment
TZ = ZoneInfo("Asia/Nicosia")  # —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ö–∏–ø—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
scheduler = AsyncIOScheduler(timezone=TZ)
jobs_by_chat = {}
# --------------------------------------------


async def send_reminder(application, chat_id, text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!"):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        await application.bot.send_message(chat_id=chat_id, text=text)
        logger.info(f"Sent reminder to {chat_id}")
    except Exception as e:
        logger.error(f"Failed to send to {chat_id}: {e}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üèù\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/setstart YYYY-MM-DDTHH:MM ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/settime HH:MM ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "/stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    )


async def setstart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö."""
    chat_id = update.effective_chat.id
    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /setstart YYYY-MM-DDTHH:MM")
        return

    try:
        dt = datetime.fromisoformat(context.args[0]).replace(tzinfo=TZ)
    except Exception:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: /setstart 2025-08-18T20:30")
        return

    application = context.application

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if chat_id in jobs_by_chat:
        scheduler.remove_job(jobs_by_chat[chat_id])
        jobs_by_chat.pop(chat_id, None)

    now = datetime.now(TZ)

    # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –¥–µ–Ω—å –ø—Ä–∏–µ–∑–¥–∞
    if dt > now:
        scheduler.add_job(
            lambda: application.create_task(
                send_reminder(application, chat_id, "–¢—ã –ø—Ä–∏–µ—Ö–∞–ª –Ω–∞ –ö–∏–ø—Ä! üá®üáæ")
            ),
            DateTrigger(run_date=dt)
        )
    else:
        await send_reminder(application, chat_id, "–¢—ã —É–∂–µ –Ω–∞ –ö–∏–ø—Ä–µ! üá®üáæ")

    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    cron = CronTrigger(hour=dt.hour, minute=dt.minute, timezone=TZ)
    job = scheduler.add_job(
        lambda: application.create_task(
            send_reminder(application, chat_id, "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! üìÖ")
        ),
        cron
    )
    jobs_by_chat[chat_id] = job.id

    await update.message.reply_text(
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ {dt.hour:02d}:{dt.minute:02d} (–≤—Ä–µ–º—è –ö–∏–ø—Ä–∞)"
    )


async def settime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    chat_id = update.effective_chat.id
    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /settime HH:MM")
        return

    try:
        hh, mm = map(int, context.args[0].split(":"))
    except Exception:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: /settime 09:00")
        return

    application = context.application
    if chat_id in jobs_by_chat:
        scheduler.remove_job(jobs_by_chat[chat_id])
        jobs_by_chat.pop(chat_id, None)

    cron = CronTrigger(hour=hh, minute=mm, timezone=TZ)
    job = scheduler.add_job(
        lambda: application.create_task(
            send_reminder(application, chat_id, "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! üìÖ")
        ),
        cron
    )
    jobs_by_chat[chat_id] = job.id

    await update.message.reply_text(
        f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {hh:02d}:{mm:02d} (Asia/Nicosia)"
    )


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    chat_id = update.effective_chat.id
    if chat_id in jobs_by_chat:
        scheduler.remove_job(jobs_by_chat[chat_id])
        jobs_by_chat.pop(chat_id, None)
        await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    else:
        await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.")


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π /start")


def main():
    token = BOT_TOKEN
    if not token:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setstart", setstart))
    app.add_handler(CommandHandler("settime", settime))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(MessageHandler(filters.COMMAND, unknown))

    scheduler.start()
    logger.info("Bot started")
    app.run_polling()


if __name__ == "__main__":
    main()
